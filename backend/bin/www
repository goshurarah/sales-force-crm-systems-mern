#!/usr/bin/env node
const express = require("express");
const mongoose = require("mongoose");
const seedIntegrationData = require("./../seeders/integrationSeeder");
const http = require('http');

// Import Stripe
const Stripe = require('stripe');
const stripe = new Stripe('YOUR_STRIPE_SECRET_KEY', {
  apiVersion: '2020-08-27',
});

// Create an Express application
const app = express();

// Connect to MongoDB database
mongoose
  .connect("mongodb://localhost:27017/salesforcecrmsystems1", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => {
    seedIntegrationData();
    console.log("Connected to MongoDB database");
  })
  .catch((error) => {
    console.error("Error connecting to MongoDB:", error);
  });

// Get port from environment and store in Express
const port = normalizePort(process.env.PORT || "8000");
app.set("port", port);

// Create HTTP server
const server = http.createServer(app);
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

// Normalize a port into a number, string, or false
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

// Event listener for HTTP server "error" event
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }
  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  console.log("Listening on " + bind);
}
